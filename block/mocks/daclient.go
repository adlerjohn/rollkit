package mocks

import (
	"context"

	"github.com/stretchr/testify/mock"

	coreda "github.com/rollkit/rollkit/core/da"
)

// DAClient is an autogenerated mock type for the Client type
type DAClient struct {
	mock.Mock
}

// GasMultiplier provides a mock function with given fields: ctx
func (_m *DAClient) GasMultiplier(ctx context.Context) (float64, error) {
	ret := _m.Called(ctx)

	var r0 float64
	if rf, ok := ret.Get(0).(func(context.Context) float64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GasPrice provides a mock function with given fields: ctx
func (_m *DAClient) GasPrice(ctx context.Context) (float64, error) {
	ret := _m.Called(ctx)

	var r0 float64
	if rf, ok := ret.Get(0).(func(context.Context) float64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNamespace provides a mock function with given fields: ctx
func (_m *DAClient) GetNamespace(ctx context.Context) ([]byte, error) {
	ret := _m.Called(ctx)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context) []byte); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MaxBlobSize provides a mock function with given fields: ctx
func (_m *DAClient) MaxBlobSize(ctx context.Context) (uint64, error) {
	ret := _m.Called(ctx)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(context.Context) uint64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Retrieve provides a mock function with given fields: ctx, dataLayerHeight
func (_m *DAClient) Retrieve(ctx context.Context, dataLayerHeight uint64) coreda.ResultRetrieve {
	ret := _m.Called(ctx, dataLayerHeight)

	var r0 coreda.ResultRetrieve
	if rf, ok := ret.Get(0).(func(context.Context, uint64) coreda.ResultRetrieve); ok {
		r0 = rf(ctx, dataLayerHeight)
	} else {
		r0 = ret.Get(0).(coreda.ResultRetrieve)
	}

	return r0
}

// Submit provides a mock function with given fields: ctx, data, maxBlobSize, gasPrice
func (_m *DAClient) Submit(ctx context.Context, data [][]byte, maxBlobSize uint64, gasPrice float64) coreda.ResultSubmit {
	ret := _m.Called(ctx, data, maxBlobSize, gasPrice)

	var r0 coreda.ResultSubmit
	if rf, ok := ret.Get(0).(func(context.Context, [][]byte, uint64, float64) coreda.ResultSubmit); ok {
		r0 = rf(ctx, data, maxBlobSize, gasPrice)
	} else {
		r0 = ret.Get(0).(coreda.ResultSubmit)
	}

	return r0
}

// NewDAClient creates a new instance of DAClient. It also registers a testing interface on the mock.
// The first argument is typically a *testing.T value.
// Remember to call AssertExpectations manually at the end of your test.
func NewDAClient(t mock.TestingT) *DAClient {
	mock := &DAClient{}
	mock.Mock.Test(t)
	// t.Cleanup(func() { mock.AssertExpectations(t) }) // Remove automatic cleanup
	return mock
}
