// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: attester/v1/attester.proto

package attesterv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AttesterService_SubmitBlock_FullMethodName     = "/attester.v1.AttesterService/SubmitBlock"
	AttesterService_SubmitSignature_FullMethodName = "/attester.v1.AttesterService/SubmitSignature"
)

// AttesterServiceClient is the client API for AttesterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AttesterServiceClient interface {
	// SubmitBlock is called by the Sequencer (or other client) to propose a block for attestation.
	// This likely triggers the leader to propose the block via Raft.
	SubmitBlock(ctx context.Context, in *SubmitBlockRequest, opts ...grpc.CallOption) (*SubmitBlockResponse, error)
	// SubmitSignature is called by follower nodes to send their signature back to the leader.
	SubmitSignature(ctx context.Context, in *SubmitSignatureRequest, opts ...grpc.CallOption) (*SubmitSignatureResponse, error)
}

type attesterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAttesterServiceClient(cc grpc.ClientConnInterface) AttesterServiceClient {
	return &attesterServiceClient{cc}
}

func (c *attesterServiceClient) SubmitBlock(ctx context.Context, in *SubmitBlockRequest, opts ...grpc.CallOption) (*SubmitBlockResponse, error) {
	out := new(SubmitBlockResponse)
	err := c.cc.Invoke(ctx, AttesterService_SubmitBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attesterServiceClient) SubmitSignature(ctx context.Context, in *SubmitSignatureRequest, opts ...grpc.CallOption) (*SubmitSignatureResponse, error) {
	out := new(SubmitSignatureResponse)
	err := c.cc.Invoke(ctx, AttesterService_SubmitSignature_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttesterServiceServer is the server API for AttesterService service.
// All implementations must embed UnimplementedAttesterServiceServer
// for forward compatibility
type AttesterServiceServer interface {
	// SubmitBlock is called by the Sequencer (or other client) to propose a block for attestation.
	// This likely triggers the leader to propose the block via Raft.
	SubmitBlock(context.Context, *SubmitBlockRequest) (*SubmitBlockResponse, error)
	// SubmitSignature is called by follower nodes to send their signature back to the leader.
	SubmitSignature(context.Context, *SubmitSignatureRequest) (*SubmitSignatureResponse, error)
	mustEmbedUnimplementedAttesterServiceServer()
}

// UnimplementedAttesterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAttesterServiceServer struct {
}

func (UnimplementedAttesterServiceServer) SubmitBlock(context.Context, *SubmitBlockRequest) (*SubmitBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitBlock not implemented")
}
func (UnimplementedAttesterServiceServer) SubmitSignature(context.Context, *SubmitSignatureRequest) (*SubmitSignatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitSignature not implemented")
}
func (UnimplementedAttesterServiceServer) mustEmbedUnimplementedAttesterServiceServer() {}

// UnsafeAttesterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AttesterServiceServer will
// result in compilation errors.
type UnsafeAttesterServiceServer interface {
	mustEmbedUnimplementedAttesterServiceServer()
}

func RegisterAttesterServiceServer(s grpc.ServiceRegistrar, srv AttesterServiceServer) {
	s.RegisterService(&AttesterService_ServiceDesc, srv)
}

func _AttesterService_SubmitBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttesterServiceServer).SubmitBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttesterService_SubmitBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttesterServiceServer).SubmitBlock(ctx, req.(*SubmitBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttesterService_SubmitSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitSignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttesterServiceServer).SubmitSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttesterService_SubmitSignature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttesterServiceServer).SubmitSignature(ctx, req.(*SubmitSignatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AttesterService_ServiceDesc is the grpc.ServiceDesc for AttesterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AttesterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "attester.v1.AttesterService",
	HandlerType: (*AttesterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitBlock",
			Handler:    _AttesterService_SubmitBlock_Handler,
		},
		{
			MethodName: "SubmitSignature",
			Handler:    _AttesterService_SubmitSignature_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "attester/v1/attester.proto",
}
